# Shadow Connect/Log off RDP sessions
# MIT License | Ukraine 2025 | Oleh Malovichko

# Check if running as administrator
Add-Type -AssemblyName System.Windows.Forms

$windowsIdentity = [Security.Principal.WindowsIdentity]::GetCurrent()
$windowsPrincipal = New-Object Security.Principal.WindowsPrincipal($windowsIdentity)
$adminRole = [Security.Principal.WindowsBuiltInRole]::Administrator

if (-not $windowsPrincipal.IsInRole($adminRole)) {
    # Determine if this is .exe or .ps1
    $selfPath = if ($PSCommandPath) {
        # This is .ps1
        "powershell"
    } else {
        # This is .exe (generated by ps2exe)
        [System.Diagnostics.Process]::GetCurrentProcess().MainModule.FileName
    }

    $argsList = if ($PSCommandPath) {
        "-ExecutionPolicy Bypass -File `"$PSCommandPath`""
    } else {
        ""
    }

    $psi = New-Object System.Diagnostics.ProcessStartInfo
    $psi.FileName = $selfPath
    $psi.Verb = "runas"
    $psi.Arguments = $argsList
    $psi.UseShellExecute = $true

    try {
        [System.Diagnostics.Process]::Start($psi) | Out-Null
    } catch {
        [System.Windows.Forms.MessageBox]::Show("You need to run this script as administrator.", "Error", "OK", "Error")
    }
    exit
}


# --- Main logic here ---

$Header = "SESSIONNAME", "USERNAME", "ID", "STATUS"
$dlgForm = New-Object System.Windows.Forms.Form
$dlgForm.Text = 'Session Connect/Logoff'
$dlgForm.Font = New-Object System.Drawing.Font("Courier New", 10, [System.Drawing.FontStyle]::Regular)
$dlgForm.Width = 500
$dlgForm.Height = 600
$dlgForm.StartPosition = 'CenterScreen'
$dlgForm.AutoSize = $false

$dlgForm.Add_Shown({
    $dlgForm.Activate()
    $dlgForm.TopMost = $true
    $dlgForm.TopMost = $false
})


# Instruction label
$lblInstruction = New-Object System.Windows.Forms.Label
$lblInstruction.Text = 'Double-click to connect to session or right-click to log off user'
$lblInstruction.Location = New-Object System.Drawing.Point(10, 37)
$lblInstruction.ForeColor = [System.Drawing.Color]::Gray
$lblInstruction.Font = New-Object System.Drawing.Font("Courier New", 8, [System.Drawing.FontStyle]::Regular)
$lblInstruction.AutoSize = $true
$dlgForm.Controls.Add($lblInstruction)

# Connect button
$dlgBttn = New-Object System.Windows.Forms.Button
$dlgBttn.Text = 'Connect'
$dlgBttn.Location = New-Object System.Drawing.Point(10, 10)
$dlgBttn.Width = 100
$dlgForm.Controls.Add($dlgBttn)

# Log off button
$dlgBttnLogOff = New-Object System.Windows.Forms.Button
$dlgBttnLogOff.Text = 'Log Off'
$dlgBttnLogOff.Location = New-Object System.Drawing.Point(120, 10)
$dlgBttnLogOff.Width = 100
$dlgForm.Controls.Add($dlgBttnLogOff)


# Refresh button
$dlgBttnR = New-Object System.Windows.Forms.Button
$dlgBttnR.Text = 'Refresh'
$dlgBttnR.Location = New-Object System.Drawing.Point(230, 10)
$dlgBttnR.Width = 100
$dlgForm.Controls.Add($dlgBttnR)

# ListView
$dlgList = New-Object System.Windows.Forms.ListView
$dlgList.Location = New-Object System.Drawing.Point(0, 60)
$dlgList.Width = $dlgForm.ClientSize.Width
$dlgList.Height = $dlgForm.ClientSize.Height - 60 - 20
$dlgList.Anchor = "Top, Left, Right, Bottom"
$dlgList.MultiSelect = $false
$dlgList.View = 'Details'
$dlgList.FullRowSelect = $true
$dlgList.GridLines = $true
$dlgList.Scrollable = $true
$dlgForm.Controls.Add($dlgList)

# Add columns
foreach ($column in $Header) {
    $dlgList.Columns.Add($column) | Out-Null
}

# Automatically adjust column widths to fit the content
foreach ($column in $dlgList.Columns) {
    $column.Width = -2
}

# Context menu
$contextMenu = New-Object System.Windows.Forms.ContextMenu
$menuItemLogoff = New-Object System.Windows.Forms.MenuItem "Log off this user?"
$contextMenu.MenuItems.Add($menuItemLogoff) | Out-Null 
$dlgList.ContextMenu = $contextMenu


# Створюємо панель для прапора
$flagPanel = New-Object System.Windows.Forms.Panel
$flagPanel.Size = New-Object System.Drawing.Size(15, 2)
$flagPanel.Dock = "Left"
$flagPanel.Margin = '5,5,0,0'  # лівий, верхній, правий, нижній

# Порожній відступ (3 пікселів)
$spacer = New-Object System.Windows.Forms.Panel
$spacer.Width = 3
$spacer.Dock = "Left"

# Обробник події Paint для малювання прапора
$flagPanel.Add_Paint({
    param($sender, $e)
    $g = $e.Graphics
    $blueBrush = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::RoyalBlue)
    $yellowBrush = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::Yellow)

    # Малюємо верхню синю половину
    $g.FillRectangle($blueBrush, 0, 4, 15,  7 )
    # Малюємо нижню жовту половину
    $g.FillRectangle($yellowBrush, 0, 9, 15, 5 )
})

# Створюємо Label з текстом
$copyright = New-Object System.Windows.Forms.Label
$copyright.Text = "MIT License | Ukraine 2025 | Oleh Malovichko"
$copyright.AutoSize = $false
$copyright.Height = 20
$copyright.Dock = "Fill"
$copyright.TextAlign = "MiddleLeft"
$copyright.Font = New-Object System.Drawing.Font("Courier New", 8, [System.Drawing.FontStyle]::Regular)
$copyright.ForeColor = [System.Drawing.Color]::Gray

# Створюємо контейнер (Panel) для прапора і тексту
$container = New-Object System.Windows.Forms.Panel
$container.Dock = "Bottom"
$container.Height = 20

# Додаємо в правильному порядку
$container.Controls.Add($copyright)
$container.Controls.Add($flagPanel)
$container.Controls.Add($spacer)


# Додаємо контейнер до форми
$dlgForm.Controls.Add($container)


# Function to refresh session list
function Refresh-SessionList {
    $dlgList.Items.Clear()

    $sessionData = $(qwinsta.exe | findstr /R "Active Disc") -replace "^[\s>]", "" -replace "\s+", "," | ConvertFrom-Csv -Header $Header

    foreach ($session in $sessionData) {
        if (-not $session.SESSIONNAME -or -not $session.ID) { continue }

        $sessionname = $session.SESSIONNAME
        $username    = if ($session.USERNAME) { $session.USERNAME } else { "" }
        $id          = $session.ID
        $status      = if ($session.PSObject.Properties.Name -contains 'STATUS') { $session.STATUS } else { "" }

        if ($null -eq $sessionname -or $sessionname -eq "") {
            Write-Warning "Skipped session with empty SESSIONNAME"
            continue
        }

        $dlgListItem = New-Object System.Windows.Forms.ListViewItem($sessionname)

        if ($null -eq $dlgListItem.SubItems) {
            Write-Warning "SubItems null, creating manually"
            $dlgListItem.SubItems = New-Object System.Windows.Forms.ListViewItem+ListViewSubItemCollection($dlgListItem)
        }

        if ($null -eq $status) { $status = "" }

        $dlgListItem.SubItems.Add($username) | Out-Null
        $dlgListItem.SubItems.Add($id) | Out-Null
        $dlgListItem.SubItems.Add($status) | Out-Null

        $dlgList.Items.Add($dlgListItem) | Out-Null
    }
}

# Function to connect to a session
function Connect-Session {
    param ($session_id)
    Start-Process mstsc.exe -ArgumentList "/shadow:$session_id /control /noConsentPrompt" -NoNewWindow
}

# Refresh button click handler
$dlgBttnR.Add_Click({
    Refresh-SessionList
})

# Connect button click handler
$dlgBttn.Add_Click({
    if ($dlgList.SelectedItems.Count -gt 0) {
        $session_id = $dlgList.SelectedItems[0].SubItems[2].Text
        Connect-Session -session_id $session_id
        Start-Sleep -Seconds 1
        Refresh-SessionList
    } else {
        [System.Windows.Forms.MessageBox]::Show("Please select a session to connect.")
    }
})

# Log off button click handler
$dlgBttnLogOff.Add_Click({
  SessionLogout
})

# Double-click on a list item to connect
$dlgList.Add_DoubleClick({
    if ($dlgList.SelectedItems.Count -gt 0) {
        $session_id = $dlgList.SelectedItems[0].SubItems[2].Text
        Connect-Session -session_id $session_id
        Start-Sleep -Seconds 1
        Refresh-SessionList
    }
})

function Wait-SessionLogoff {
    param (
        [string]$session_id,
        [int]$maxAttempts = 10,
        [int]$delaySeconds = 2
    )

    for ($i = 0; $i -lt $maxAttempts; $i++) {
        Refresh-SessionList
        Start-Sleep -Seconds $delaySeconds

        # Check if session still exists
        $sessionExists = $dlgList.Items | Where-Object {
            $_.SubItems[2].Text -eq $session_id
        }

        if (-not $sessionExists) {
            return $true  # Session ended
        }
    }

    return $false  # Session did not disappear after max attempts
}

# Session logout function
function SessionLogout {
    if ($dlgList.SelectedItems.Count -gt 0) {
        $session_id = $dlgList.SelectedItems[0].SubItems[2].Text
        $username = $dlgList.SelectedItems[0].SubItems[1].Text

        $result = [System.Windows.Forms.MessageBox]::Show(
            "Are you sure you want to log off user $username (ID $session_id)?",
            "Confirmation",
            [System.Windows.Forms.MessageBoxButtons]::YesNo,
            [System.Windows.Forms.MessageBoxIcon]::Warning
        )

        if ($result -eq [System.Windows.Forms.DialogResult]::Yes) {
            try {
                # Start-Process logoff.exe -ArgumentList $session_id -NoNewWindow -WindowStyle Hidden
                Start-Process logoff.exe -ArgumentList $session_id -WindowStyle Hidden
                # Start-Sleep -Seconds 3

                $loggedOff = Wait-SessionLogoff -session_id $session_id

                if ($loggedOff) {
                    [System.Windows.Forms.MessageBox]::Show("User session $username has been terminated.")
                } else {
                    [System.Windows.Forms.MessageBox]::Show("Failed to confirm termination of session $username.")
                }

            } catch {
                [System.Windows.Forms.MessageBox]::Show("Failed to terminate session: $_")
            }
        }
    } else {
        [System.Windows.Forms.MessageBox]::Show("Please select a session to terminate.")
    }
}

# Context menu "Log Off" click handler
$menuItemLogoff.Add_Click({
  SessionLogout
})

# Initial load of session list
Refresh-SessionList | Out-Null

# Show the form
$dlgForm.ShowDialog() | Out-Null

